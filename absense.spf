<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>ContentFilters</key>
	<dict/>
	<key>auto_connect</key>
	<true/>
	<key>data</key>
	<dict>
		<key>connection</key>
		<dict>
			<key>database</key>
			<string>test</string>
			<key>host</key>
			<string>127.0.0.1</string>
			<key>name</key>
			<string>absense</string>
			<key>rdbms_type</key>
			<string>mysql</string>
			<key>sslCACertFileLocation</key>
			<string></string>
			<key>sslCACertFileLocationEnabled</key>
			<integer>0</integer>
			<key>sslCertificateFileLocation</key>
			<string></string>
			<key>sslCertificateFileLocationEnabled</key>
			<integer>0</integer>
			<key>sslKeyFileLocation</key>
			<string></string>
			<key>sslKeyFileLocationEnabled</key>
			<integer>0</integer>
			<key>type</key>
			<string>SPTCPIPConnection</string>
			<key>useSSL</key>
			<integer>0</integer>
			<key>user</key>
			<string>root</string>
		</dict>
		<key>session</key>
		<dict>
			<key>connectionEncoding</key>
			<string>utf8</string>
			<key>contentPageNumber</key>
			<integer>1</integer>
			<key>contentSelection</key>
			<data>
			YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFy
			Y2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJX
			TlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAF
			gAdUdHlwZVRyb3dzXxAdU2VsZWN0aW9uRGV0YWlsVHlwZU5TSW5k
			ZXhTZXTSFwsYGVxOU1JhbmdlQ291bnQQAIAG0hscHR5aJGNsYXNz
			bmFtZVgkY2xhc3Nlc1pOU0luZGV4U2V0oh8gWk5TSW5kZXhTZXRY
			TlNPYmplY3TSGxwiI1xOU0RpY3Rpb25hcnmiIiBfEA9OU0tleWVk
			QXJjaGl2ZXLRJidUZGF0YYABAAgAEQAaACMALQAyADcAQABGAE0A
			VQBgAGcAagBsAG4AcQBzAHUAdwB8AIEAoQCmALMAtQC3ALwAxwDQ
			ANsA3gDpAPIA9wEEAQcBGQEcASEAAAAAAAACAQAAAAAAAAAoAAAA
			AAAAAAAAAAAAAAABIw==
			</data>
			<key>contentSortColIsAsc</key>
			<true/>
			<key>contentViewport</key>
			<string>{{0, 0}, {1080, 639}}</string>
			<key>isToolbarVisible</key>
			<true/>
			<key>queries</key>
			<string>DROP TABLE IF EXISTS absences;

CREATE TABLE absences(
	student_id INT UNSIGNED NOT NULL,
	date DATE NOT NULL,
	PRIMARY KEY(student_id, date)
);

INSERT INTO absences VALUES
	(6, '2014-08-29'),
	(1, '2014-08-29'),
	(4, '2014-08-27');</string>
			<key>view</key>
			<string>SP_VIEW_CUSTOMQUERY</string>
			<key>windowVerticalDividerPosition</key>
			<real>200</real>
		</dict>
	</dict>
	<key>encrypted</key>
	<false/>
	<key>format</key>
	<string>connection</string>
	<key>queryFavorites</key>
	<array/>
	<key>queryHistory</key>
	<array>
		<string>DROP TABLE IF EXISTS absences;
CREATE TABLE absences(
	student_id INT UNSIGNED NOT NULL,
	date DATE NOT NULL,
	PRIMARY KEY(student_id, date)
);
INSERT INTO absences VALUES
	(6, '2014-08-29'),
	(1, '2014-08-29'),
	(4, '2014-08-27')</string>
		<string>DROP TABLE IF EXISTS absences;
CREATE TABLE absences(
	student_id INT UNSIGNED NOT NULL,
	date DATE NOT NULL,
	PRIMARY KEY(student_id, date)
);
INSERT INTO abesences VALUES
	(6, '2014-08-29'),
	(1, '2014-08-29'),
	(4, '2014-08-27')</string>
		<string>DROP TABLE IF EXISTS absenses</string>
		<string>CREATE TABLE absenses(
	student_id INT UNSIGNED NOT NULL,
	date DATE NOT NULL,
	PRIMARY KEY(student_id, date)
)</string>
		<string>DROP TABLE IF EXISTS absenses;
CREATE TABLE absenses(
	student_id INT UNSIGNED NOT NULL,
	date DATE NOT NULL,
	PRIMARY KEY(student_id, date)
);
INSERT INTO abesences VALUES
	(6, '2014-08-29'),
	(1, '2014-08-29'),
	(4, '2014-08-27')</string>
		<string>DROP TABLE IF EXISTS absenses;
CREATE TABLE absenses(
	student_id INT UNSIGNED NOT NULL,
	date DATE NOT NULL,
	PRIMARY KEY(student_id, date)
)</string>
		<string>DROP TABLE IF EXISTS absense</string>
		<string>CREATE TABLE absense(
	student_id INT UNSIGNED NOT NULL,
	date DATE NOT NULL,
	PRIMARY KEY(student_id, date)
)</string>
		<string>CREATE TABLE score (
	student_id INT UNSIGNED NOT NULL,
	event_id INT UNSIGNED NOT NULL,
	score INT NOT NULL,
	PRIMARY KEY(event_id, student_id)
)</string>
		<string>CREATE TABLE test(
	date DATE NOT NULL,
	type ENUM('T', 'Q') NOT NULL,
	class_id INT UNSIGNED NOT NULL,
	test_id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY
)</string>
		<string>CREATE TABLE test(
	date DATE NOT NULL,
	type ENUM('T', 'Q') NOT NULL,
	class_id INT UNSIGNED NOT NULL,
	test_id INT UNSIGNED NOT NULL AUTO INCREMENT PRIMARY KEY
)</string>
		<string>Select * FROM class</string>
		<string>SELECT * FROM student;
Select * FROM class</string>
		<string>DROP TABLE IF EXISTS class;
CREATE TABLE class(
	name VARCHAR(30) NOT NULL,
	class_id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY
);
INSERT INTO class VALUES
('English', NULL), ('Speech', NULL), ('Literature', NULL),
('Algebra', NULL), ('Geometry', NULL), ('Trigonometry', NULL),
('Calculus', NULL), ('Earth Science', NULL), ('Biology', NULL),
('Chemistry', NULL), ('Physics', NULL), ('History', NULL), ('Art', NULL), ('Gym', NULL)</string>
		<string>DROP TABLE IF EXISTS class;
CREATE TABLE class(
	name VARCHAR(30) NOT NULL,
	class_id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY
)</string>
		<string>DROP TABLE IF EXISTS class;
CREATE TABLE class(
	name VARCHAR(30) NOT NULL,
	class_id UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY
)</string>
		<string>SELECT * FROM student</string>
		<string>select employee.name, 
salary.amount, 
salary.date,
@curRank := @curRank + 1 as rank
from employee inner join salary
on employee.id=salary.employee_id</string>
		<string>select employee.name, 
salary.amount, 
salary.date,
@curRank := @curRank + 1 as rank
from employee inner join salary
group by name
on employee.id=salary.employee_id</string>
		<string>select employee.name, 
salary.amount, 
salary.date,
@curRank := @curRank + 1 as rank
from employee inner join salary
on employee.id=salary.employee_id
group by amount</string>
	</array>
	<key>rdbms_type</key>
	<string>mysql</string>
	<key>rdbms_version</key>
	<string>5.7.18</string>
	<key>version</key>
	<integer>1</integer>
</dict>
</plist>
